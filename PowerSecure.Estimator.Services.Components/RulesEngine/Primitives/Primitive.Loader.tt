<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<#
	IServiceProvider serviceProvider = (IServiceProvider)this.Host;
    EnvDTE.DTE dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
	//Project project = dte.Solutions.Projects.Where(p => p.Name == "PowerSecure.Estimator.Services.Components");

    //Array projects = dte.Solution.Projects.
	var project = dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
	string root = Host.ResolvePath("");
	var projectItems = GetProjectItemsRecursively(project.ProjectItems);
#>
using System.Collections.Generic;

namespace PowerSecure.Estimator.Services.Components.RulesEngine.Primitives
{
	public static partial class Primitive
	{
		public static IDictionary<string, IPrimitive> Load() 
		{
			IPrimitive primitive;
			var dict = new Dictionary<string, IPrimitive>();
<# ListFiles(projectItems); #>
			return dict;
		}
	}
}
<#+
    public void ListFiles(List<string> projectItems)
	{
		var root = Host.ResolvePath("");
		
		var fileNames = Directory.EnumerateFiles(root, "*.cs", SearchOption.AllDirectories)
			.Select(f => f.Replace("\\", "/"))
			.Where(f => projectItems.Any(p => p.Equals(f, StringComparison.OrdinalIgnoreCase)))
			.Select(f => f.Substring(root.Length+1).Replace(".cs",string.Empty))
			.Where(f => f != "Primitive" && f != "IPrimitive" && f.EndsWith("Primitive"))
			.OrderBy(f => f)
			.ToList();

		foreach(string fileName in fileNames)
		{
			WriteLine(string.Format("\t\t\tprimitive = new {0}();", fileName));
			WriteLine("\t\t\tdict.Add(primitive.Name, primitive);");
		}
	}

	public List<string> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<string>();
		if (items == null) return ret;

		foreach(EnvDTE.ProjectItem item in items)
		{
			string result = item.FileNames[1].Replace("\\", "/");
			
			// If not folder.
			if (result[result.Length - 1] != '\\')
			{
				ret.Add(result);
			}
						
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}

		return ret;
	}
#>